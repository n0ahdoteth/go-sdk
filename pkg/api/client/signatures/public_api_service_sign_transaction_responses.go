// Code generated by go-swagger; DO NOT EDIT.

package signatures

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tkhq/go-sdk/pkg/api/models"
)

// PublicAPIServiceSignTransactionReader is a Reader for the PublicAPIServiceSignTransaction structure.
type PublicAPIServiceSignTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicAPIServiceSignTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicAPIServiceSignTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPublicAPIServiceSignTransactionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPublicAPIServiceSignTransactionOK creates a PublicAPIServiceSignTransactionOK with default headers values
func NewPublicAPIServiceSignTransactionOK() *PublicAPIServiceSignTransactionOK {
	return &PublicAPIServiceSignTransactionOK{}
}

/*
PublicAPIServiceSignTransactionOK describes a response with status code 200, with default header values.

A successful response.
*/
type PublicAPIServiceSignTransactionOK struct {
	Payload *models.V1ActivityResponse
}

// IsSuccess returns true when this public Api service sign transaction o k response has a 2xx status code
func (o *PublicAPIServiceSignTransactionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this public Api service sign transaction o k response has a 3xx status code
func (o *PublicAPIServiceSignTransactionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this public Api service sign transaction o k response has a 4xx status code
func (o *PublicAPIServiceSignTransactionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this public Api service sign transaction o k response has a 5xx status code
func (o *PublicAPIServiceSignTransactionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this public Api service sign transaction o k response a status code equal to that given
func (o *PublicAPIServiceSignTransactionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the public Api service sign transaction o k response
func (o *PublicAPIServiceSignTransactionOK) Code() int {
	return 200
}

func (o *PublicAPIServiceSignTransactionOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/submit/sign_transaction][%d] publicApiServiceSignTransactionOK  %+v", 200, o.Payload)
}

func (o *PublicAPIServiceSignTransactionOK) String() string {
	return fmt.Sprintf("[POST /public/v1/submit/sign_transaction][%d] publicApiServiceSignTransactionOK  %+v", 200, o.Payload)
}

func (o *PublicAPIServiceSignTransactionOK) GetPayload() *models.V1ActivityResponse {
	return o.Payload
}

func (o *PublicAPIServiceSignTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ActivityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicAPIServiceSignTransactionDefault creates a PublicAPIServiceSignTransactionDefault with default headers values
func NewPublicAPIServiceSignTransactionDefault(code int) *PublicAPIServiceSignTransactionDefault {
	return &PublicAPIServiceSignTransactionDefault{
		_statusCode: code,
	}
}

/*
PublicAPIServiceSignTransactionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PublicAPIServiceSignTransactionDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this public Api service sign transaction default response has a 2xx status code
func (o *PublicAPIServiceSignTransactionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this public Api service sign transaction default response has a 3xx status code
func (o *PublicAPIServiceSignTransactionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this public Api service sign transaction default response has a 4xx status code
func (o *PublicAPIServiceSignTransactionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this public Api service sign transaction default response has a 5xx status code
func (o *PublicAPIServiceSignTransactionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this public Api service sign transaction default response a status code equal to that given
func (o *PublicAPIServiceSignTransactionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the public Api service sign transaction default response
func (o *PublicAPIServiceSignTransactionDefault) Code() int {
	return o._statusCode
}

func (o *PublicAPIServiceSignTransactionDefault) Error() string {
	return fmt.Sprintf("[POST /public/v1/submit/sign_transaction][%d] PublicApiService_SignTransaction default  %+v", o._statusCode, o.Payload)
}

func (o *PublicAPIServiceSignTransactionDefault) String() string {
	return fmt.Sprintf("[POST /public/v1/submit/sign_transaction][%d] PublicApiService_SignTransaction default  %+v", o._statusCode, o.Payload)
}

func (o *PublicAPIServiceSignTransactionDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *PublicAPIServiceSignTransactionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
