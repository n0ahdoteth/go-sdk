// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1CreateSubOrganizationIntentV2 v1 create sub organization intent v2
//
// swagger:model v1CreateSubOrganizationIntentV2
type V1CreateSubOrganizationIntentV2 struct {

	// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
	// Required: true
	RootQuorumThreshold *int32 `json:"rootQuorumThreshold"`

	// Root users to create within this sub-organization
	// Required: true
	RootUsers []*V1RootUserParams `json:"rootUsers"`

	// Name for this sub-organization
	// Required: true
	SubOrganizationName *string `json:"subOrganizationName"`
}

// Validate validates this v1 create sub organization intent v2
func (m *V1CreateSubOrganizationIntentV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootQuorumThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CreateSubOrganizationIntentV2) validateRootQuorumThreshold(formats strfmt.Registry) error {

	if err := validate.Required("rootQuorumThreshold", "body", m.RootQuorumThreshold); err != nil {
		return err
	}

	return nil
}

func (m *V1CreateSubOrganizationIntentV2) validateRootUsers(formats strfmt.Registry) error {

	if err := validate.Required("rootUsers", "body", m.RootUsers); err != nil {
		return err
	}

	for i := 0; i < len(m.RootUsers); i++ {
		if swag.IsZero(m.RootUsers[i]) { // not required
			continue
		}

		if m.RootUsers[i] != nil {
			if err := m.RootUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1CreateSubOrganizationIntentV2) validateSubOrganizationName(formats strfmt.Registry) error {

	if err := validate.Required("subOrganizationName", "body", m.SubOrganizationName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 create sub organization intent v2 based on the context it is used
func (m *V1CreateSubOrganizationIntentV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CreateSubOrganizationIntentV2) contextValidateRootUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootUsers); i++ {

		if m.RootUsers[i] != nil {

			if swag.IsZero(m.RootUsers[i]) { // not required
				return nil
			}

			if err := m.RootUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CreateSubOrganizationIntentV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CreateSubOrganizationIntentV2) UnmarshalBinary(b []byte) error {
	var res V1CreateSubOrganizationIntentV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
