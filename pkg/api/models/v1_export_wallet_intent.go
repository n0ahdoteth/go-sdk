// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ExportWalletIntent v1 export wallet intent
//
// swagger:model v1ExportWalletIntent
type V1ExportWalletIntent struct {

	// The language of the mnemonic to export. Defaults to English.
	Language V1MnemonicLanguage `json:"language,omitempty"`

	// Client-side public key generated by the user, to which the export bundle will be encrypted.
	// Required: true
	TargetPublicKey *string `json:"targetPublicKey"`

	// Unique identifier for a given Wallet.
	// Required: true
	WalletID *string `json:"walletId"`
}

// Validate validates this v1 export wallet intent
func (m *V1ExportWalletIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ExportWalletIntent) validateLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if err := m.Language.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("language")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("language")
		}
		return err
	}

	return nil
}

func (m *V1ExportWalletIntent) validateTargetPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("targetPublicKey", "body", m.TargetPublicKey); err != nil {
		return err
	}

	return nil
}

func (m *V1ExportWalletIntent) validateWalletID(formats strfmt.Registry) error {

	if err := validate.Required("walletId", "body", m.WalletID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 export wallet intent based on the context it is used
func (m *V1ExportWalletIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLanguage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ExportWalletIntent) contextValidateLanguage(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if err := m.Language.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("language")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("language")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ExportWalletIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ExportWalletIntent) UnmarshalBinary(b []byte) error {
	var res V1ExportWalletIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
