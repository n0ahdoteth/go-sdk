// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Intent v1 intent
//
// swagger:model v1Intent
type V1Intent struct {

	// accept invitation intent
	AcceptInvitationIntent *V1AcceptInvitationIntent `json:"acceptInvitationIntent,omitempty"`

	// accept invitation intent v2
	AcceptInvitationIntentV2 *V1AcceptInvitationIntentV2 `json:"acceptInvitationIntentV2,omitempty"`

	// activate billing tier intent
	ActivateBillingTierIntent *V1ActivateBillingTierIntent `json:"activateBillingTierIntent,omitempty"`

	// approve activity intent
	ApproveActivityIntent *V1ApproveActivityIntent `json:"approveActivityIntent,omitempty"`

	// create Api keys intent
	CreateAPIKeysIntent *V1CreateAPIKeysIntent `json:"createApiKeysIntent,omitempty"`

	// create Api only users intent
	CreateAPIOnlyUsersIntent *V1CreateAPIOnlyUsersIntent `json:"createApiOnlyUsersIntent,omitempty"`

	// create authenticators intent
	CreateAuthenticatorsIntent *V1CreateAuthenticatorsIntent `json:"createAuthenticatorsIntent,omitempty"`

	// create authenticators intent v2
	CreateAuthenticatorsIntentV2 *V1CreateAuthenticatorsIntentV2 `json:"createAuthenticatorsIntentV2,omitempty"`

	// create invitations intent
	CreateInvitationsIntent *V1CreateInvitationsIntent `json:"createInvitationsIntent,omitempty"`

	// create organization intent
	// Required: true
	CreateOrganizationIntent *V1CreateOrganizationIntent `json:"createOrganizationIntent"`

	// create organization intent v2
	CreateOrganizationIntentV2 *V1CreateOrganizationIntentV2 `json:"createOrganizationIntentV2,omitempty"`

	// create policy intent
	CreatePolicyIntent *V1CreatePolicyIntent `json:"createPolicyIntent,omitempty"`

	// create policy intent v2
	CreatePolicyIntentV2 *V1CreatePolicyIntentV2 `json:"createPolicyIntentV2,omitempty"`

	// create policy intent v3
	CreatePolicyIntentV3 *V1CreatePolicyIntentV3 `json:"createPolicyIntentV3,omitempty"`

	// create private key tag intent
	CreatePrivateKeyTagIntent *V1CreatePrivateKeyTagIntent `json:"createPrivateKeyTagIntent,omitempty"`

	// create private keys intent
	CreatePrivateKeysIntent *V1CreatePrivateKeysIntent `json:"createPrivateKeysIntent,omitempty"`

	// create private keys intent v2
	CreatePrivateKeysIntentV2 *V1CreatePrivateKeysIntentV2 `json:"createPrivateKeysIntentV2,omitempty"`

	// create sub organization intent
	CreateSubOrganizationIntent *V1CreateSubOrganizationIntent `json:"createSubOrganizationIntent,omitempty"`

	// create sub organization intent v2
	CreateSubOrganizationIntentV2 *V1CreateSubOrganizationIntentV2 `json:"createSubOrganizationIntentV2,omitempty"`

	// create sub organization intent v3
	CreateSubOrganizationIntentV3 *V1CreateSubOrganizationIntentV3 `json:"createSubOrganizationIntentV3,omitempty"`

	// create sub organization intent v4
	CreateSubOrganizationIntentV4 *V1CreateSubOrganizationIntentV4 `json:"createSubOrganizationIntentV4,omitempty"`

	// create user tag intent
	CreateUserTagIntent *V1CreateUserTagIntent `json:"createUserTagIntent,omitempty"`

	// create users intent
	CreateUsersIntent *V1CreateUsersIntent `json:"createUsersIntent,omitempty"`

	// create users intent v2
	CreateUsersIntentV2 *V1CreateUsersIntentV2 `json:"createUsersIntentV2,omitempty"`

	// create wallet accounts intent
	CreateWalletAccountsIntent *V1CreateWalletAccountsIntent `json:"createWalletAccountsIntent,omitempty"`

	// create wallet intent
	CreateWalletIntent *V1CreateWalletIntent `json:"createWalletIntent,omitempty"`

	// delete Api keys intent
	DeleteAPIKeysIntent *V1DeleteAPIKeysIntent `json:"deleteApiKeysIntent,omitempty"`

	// delete authenticators intent
	DeleteAuthenticatorsIntent *V1DeleteAuthenticatorsIntent `json:"deleteAuthenticatorsIntent,omitempty"`

	// delete invitation intent
	DeleteInvitationIntent *V1DeleteInvitationIntent `json:"deleteInvitationIntent,omitempty"`

	// delete organization intent
	DeleteOrganizationIntent *V1DeleteOrganizationIntent `json:"deleteOrganizationIntent,omitempty"`

	// delete payment method intent
	DeletePaymentMethodIntent *V1DeletePaymentMethodIntent `json:"deletePaymentMethodIntent,omitempty"`

	// delete policy intent
	DeletePolicyIntent *V1DeletePolicyIntent `json:"deletePolicyIntent,omitempty"`

	// delete private key tags intent
	DeletePrivateKeyTagsIntent *V1DeletePrivateKeyTagsIntent `json:"deletePrivateKeyTagsIntent,omitempty"`

	// delete user tags intent
	DeleteUserTagsIntent *V1DeleteUserTagsIntent `json:"deleteUserTagsIntent,omitempty"`

	// delete users intent
	DeleteUsersIntent *V1DeleteUsersIntent `json:"deleteUsersIntent,omitempty"`

	// disable private key intent
	DisablePrivateKeyIntent *V1DisablePrivateKeyIntent `json:"disablePrivateKeyIntent,omitempty"`

	// export private key intent
	ExportPrivateKeyIntent *V1ExportPrivateKeyIntent `json:"exportPrivateKeyIntent,omitempty"`

	// export wallet intent
	ExportWalletIntent *V1ExportWalletIntent `json:"exportWalletIntent,omitempty"`

	// init user email recovery intent
	InitUserEmailRecoveryIntent *V1InitUserEmailRecoveryIntent `json:"initUserEmailRecoveryIntent,omitempty"`

	// recover user intent
	RecoverUserIntent *V1RecoverUserIntent `json:"recoverUserIntent,omitempty"`

	// reject activity intent
	RejectActivityIntent *V1RejectActivityIntent `json:"rejectActivityIntent,omitempty"`

	// remove organization feature intent
	RemoveOrganizationFeatureIntent *V1RemoveOrganizationFeatureIntent `json:"removeOrganizationFeatureIntent,omitempty"`

	// set organization feature intent
	SetOrganizationFeatureIntent *V1SetOrganizationFeatureIntent `json:"setOrganizationFeatureIntent,omitempty"`

	// set payment method intent
	SetPaymentMethodIntent *V1SetPaymentMethodIntent `json:"setPaymentMethodIntent,omitempty"`

	// set payment method intent v2
	SetPaymentMethodIntentV2 *V1SetPaymentMethodIntentV2 `json:"setPaymentMethodIntentV2,omitempty"`

	// sign raw payload intent
	SignRawPayloadIntent *V1SignRawPayloadIntent `json:"signRawPayloadIntent,omitempty"`

	// sign raw payload intent v2
	SignRawPayloadIntentV2 *V1SignRawPayloadIntentV2 `json:"signRawPayloadIntentV2,omitempty"`

	// sign transaction intent
	SignTransactionIntent *V1SignTransactionIntent `json:"signTransactionIntent,omitempty"`

	// sign transaction intent v2
	SignTransactionIntentV2 *V1SignTransactionIntentV2 `json:"signTransactionIntentV2,omitempty"`

	// update allowed origins intent
	UpdateAllowedOriginsIntent *V1UpdateAllowedOriginsIntent `json:"updateAllowedOriginsIntent,omitempty"`

	// update policy intent
	UpdatePolicyIntent *V1UpdatePolicyIntent `json:"updatePolicyIntent,omitempty"`

	// update private key tag intent
	UpdatePrivateKeyTagIntent *V1UpdatePrivateKeyTagIntent `json:"updatePrivateKeyTagIntent,omitempty"`

	// update root quorum intent
	UpdateRootQuorumIntent *V1UpdateRootQuorumIntent `json:"updateRootQuorumIntent,omitempty"`

	// update user intent
	UpdateUserIntent *V1UpdateUserIntent `json:"updateUserIntent,omitempty"`

	// update user tag intent
	UpdateUserTagIntent *V1UpdateUserTagIntent `json:"updateUserTagIntent,omitempty"`
}

// Validate validates this v1 intent
func (m *V1Intent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptInvitationIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptInvitationIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivateBillingTierIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApproveActivityIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateAPIKeysIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateAPIOnlyUsersIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateAuthenticatorsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateAuthenticatorsIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateInvitationsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateOrganizationIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateOrganizationIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePolicyIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePolicyIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePolicyIntentV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePrivateKeyTagIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePrivateKeysIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePrivateKeysIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateSubOrganizationIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateSubOrganizationIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateSubOrganizationIntentV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateSubOrganizationIntentV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateUserTagIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateUsersIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateUsersIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateWalletAccountsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateWalletIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteAPIKeysIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteAuthenticatorsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteInvitationIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteOrganizationIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletePaymentMethodIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletePolicyIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletePrivateKeyTagsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteUserTagsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteUsersIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisablePrivateKeyIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportPrivateKeyIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportWalletIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitUserEmailRecoveryIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverUserIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectActivityIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoveOrganizationFeatureIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetOrganizationFeatureIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetPaymentMethodIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetPaymentMethodIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignRawPayloadIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignRawPayloadIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignTransactionIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignTransactionIntentV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateAllowedOriginsIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatePolicyIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatePrivateKeyTagIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateRootQuorumIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateUserIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateUserTagIntent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Intent) validateAcceptInvitationIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptInvitationIntent) { // not required
		return nil
	}

	if m.AcceptInvitationIntent != nil {
		if err := m.AcceptInvitationIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptInvitationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acceptInvitationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateAcceptInvitationIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptInvitationIntentV2) { // not required
		return nil
	}

	if m.AcceptInvitationIntentV2 != nil {
		if err := m.AcceptInvitationIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptInvitationIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acceptInvitationIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateActivateBillingTierIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivateBillingTierIntent) { // not required
		return nil
	}

	if m.ActivateBillingTierIntent != nil {
		if err := m.ActivateBillingTierIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateBillingTierIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateBillingTierIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateApproveActivityIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.ApproveActivityIntent) { // not required
		return nil
	}

	if m.ApproveActivityIntent != nil {
		if err := m.ApproveActivityIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approveActivityIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("approveActivityIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateAPIKeysIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateAPIKeysIntent) { // not required
		return nil
	}

	if m.CreateAPIKeysIntent != nil {
		if err := m.CreateAPIKeysIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createApiKeysIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createApiKeysIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateAPIOnlyUsersIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateAPIOnlyUsersIntent) { // not required
		return nil
	}

	if m.CreateAPIOnlyUsersIntent != nil {
		if err := m.CreateAPIOnlyUsersIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createApiOnlyUsersIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createApiOnlyUsersIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateAuthenticatorsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateAuthenticatorsIntent) { // not required
		return nil
	}

	if m.CreateAuthenticatorsIntent != nil {
		if err := m.CreateAuthenticatorsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createAuthenticatorsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createAuthenticatorsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateAuthenticatorsIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateAuthenticatorsIntentV2) { // not required
		return nil
	}

	if m.CreateAuthenticatorsIntentV2 != nil {
		if err := m.CreateAuthenticatorsIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createAuthenticatorsIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createAuthenticatorsIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateInvitationsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateInvitationsIntent) { // not required
		return nil
	}

	if m.CreateInvitationsIntent != nil {
		if err := m.CreateInvitationsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvitationsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createInvitationsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateOrganizationIntent(formats strfmt.Registry) error {

	if err := validate.Required("createOrganizationIntent", "body", m.CreateOrganizationIntent); err != nil {
		return err
	}

	if m.CreateOrganizationIntent != nil {
		if err := m.CreateOrganizationIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateOrganizationIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateOrganizationIntentV2) { // not required
		return nil
	}

	if m.CreateOrganizationIntentV2 != nil {
		if err := m.CreateOrganizationIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreatePolicyIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatePolicyIntent) { // not required
		return nil
	}

	if m.CreatePolicyIntent != nil {
		if err := m.CreatePolicyIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPolicyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPolicyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreatePolicyIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatePolicyIntentV2) { // not required
		return nil
	}

	if m.CreatePolicyIntentV2 != nil {
		if err := m.CreatePolicyIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPolicyIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPolicyIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreatePolicyIntentV3(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatePolicyIntentV3) { // not required
		return nil
	}

	if m.CreatePolicyIntentV3 != nil {
		if err := m.CreatePolicyIntentV3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPolicyIntentV3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPolicyIntentV3")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreatePrivateKeyTagIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatePrivateKeyTagIntent) { // not required
		return nil
	}

	if m.CreatePrivateKeyTagIntent != nil {
		if err := m.CreatePrivateKeyTagIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPrivateKeyTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPrivateKeyTagIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreatePrivateKeysIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatePrivateKeysIntent) { // not required
		return nil
	}

	if m.CreatePrivateKeysIntent != nil {
		if err := m.CreatePrivateKeysIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPrivateKeysIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPrivateKeysIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreatePrivateKeysIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatePrivateKeysIntentV2) { // not required
		return nil
	}

	if m.CreatePrivateKeysIntentV2 != nil {
		if err := m.CreatePrivateKeysIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPrivateKeysIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPrivateKeysIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateSubOrganizationIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateSubOrganizationIntent) { // not required
		return nil
	}

	if m.CreateSubOrganizationIntent != nil {
		if err := m.CreateSubOrganizationIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateSubOrganizationIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateSubOrganizationIntentV2) { // not required
		return nil
	}

	if m.CreateSubOrganizationIntentV2 != nil {
		if err := m.CreateSubOrganizationIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateSubOrganizationIntentV3(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateSubOrganizationIntentV3) { // not required
		return nil
	}

	if m.CreateSubOrganizationIntentV3 != nil {
		if err := m.CreateSubOrganizationIntentV3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntentV3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntentV3")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateSubOrganizationIntentV4(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateSubOrganizationIntentV4) { // not required
		return nil
	}

	if m.CreateSubOrganizationIntentV4 != nil {
		if err := m.CreateSubOrganizationIntentV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntentV4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntentV4")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateUserTagIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateUserTagIntent) { // not required
		return nil
	}

	if m.CreateUserTagIntent != nil {
		if err := m.CreateUserTagIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUserTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createUserTagIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateUsersIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateUsersIntent) { // not required
		return nil
	}

	if m.CreateUsersIntent != nil {
		if err := m.CreateUsersIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUsersIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createUsersIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateUsersIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateUsersIntentV2) { // not required
		return nil
	}

	if m.CreateUsersIntentV2 != nil {
		if err := m.CreateUsersIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUsersIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createUsersIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateWalletAccountsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateWalletAccountsIntent) { // not required
		return nil
	}

	if m.CreateWalletAccountsIntent != nil {
		if err := m.CreateWalletAccountsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createWalletAccountsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createWalletAccountsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateCreateWalletIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateWalletIntent) { // not required
		return nil
	}

	if m.CreateWalletIntent != nil {
		if err := m.CreateWalletIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createWalletIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createWalletIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeleteAPIKeysIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteAPIKeysIntent) { // not required
		return nil
	}

	if m.DeleteAPIKeysIntent != nil {
		if err := m.DeleteAPIKeysIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteApiKeysIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteApiKeysIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeleteAuthenticatorsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteAuthenticatorsIntent) { // not required
		return nil
	}

	if m.DeleteAuthenticatorsIntent != nil {
		if err := m.DeleteAuthenticatorsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAuthenticatorsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteAuthenticatorsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeleteInvitationIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteInvitationIntent) { // not required
		return nil
	}

	if m.DeleteInvitationIntent != nil {
		if err := m.DeleteInvitationIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteInvitationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteInvitationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeleteOrganizationIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteOrganizationIntent) { // not required
		return nil
	}

	if m.DeleteOrganizationIntent != nil {
		if err := m.DeleteOrganizationIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteOrganizationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteOrganizationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeletePaymentMethodIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletePaymentMethodIntent) { // not required
		return nil
	}

	if m.DeletePaymentMethodIntent != nil {
		if err := m.DeletePaymentMethodIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletePaymentMethodIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletePaymentMethodIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeletePolicyIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletePolicyIntent) { // not required
		return nil
	}

	if m.DeletePolicyIntent != nil {
		if err := m.DeletePolicyIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletePolicyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletePolicyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeletePrivateKeyTagsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletePrivateKeyTagsIntent) { // not required
		return nil
	}

	if m.DeletePrivateKeyTagsIntent != nil {
		if err := m.DeletePrivateKeyTagsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletePrivateKeyTagsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletePrivateKeyTagsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeleteUserTagsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteUserTagsIntent) { // not required
		return nil
	}

	if m.DeleteUserTagsIntent != nil {
		if err := m.DeleteUserTagsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteUserTagsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteUserTagsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDeleteUsersIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteUsersIntent) { // not required
		return nil
	}

	if m.DeleteUsersIntent != nil {
		if err := m.DeleteUsersIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteUsersIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteUsersIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateDisablePrivateKeyIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.DisablePrivateKeyIntent) { // not required
		return nil
	}

	if m.DisablePrivateKeyIntent != nil {
		if err := m.DisablePrivateKeyIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disablePrivateKeyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disablePrivateKeyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateExportPrivateKeyIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.ExportPrivateKeyIntent) { // not required
		return nil
	}

	if m.ExportPrivateKeyIntent != nil {
		if err := m.ExportPrivateKeyIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exportPrivateKeyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exportPrivateKeyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateExportWalletIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.ExportWalletIntent) { // not required
		return nil
	}

	if m.ExportWalletIntent != nil {
		if err := m.ExportWalletIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exportWalletIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exportWalletIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateInitUserEmailRecoveryIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.InitUserEmailRecoveryIntent) { // not required
		return nil
	}

	if m.InitUserEmailRecoveryIntent != nil {
		if err := m.InitUserEmailRecoveryIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initUserEmailRecoveryIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initUserEmailRecoveryIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateRecoverUserIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverUserIntent) { // not required
		return nil
	}

	if m.RecoverUserIntent != nil {
		if err := m.RecoverUserIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverUserIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverUserIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateRejectActivityIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectActivityIntent) { // not required
		return nil
	}

	if m.RejectActivityIntent != nil {
		if err := m.RejectActivityIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejectActivityIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rejectActivityIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateRemoveOrganizationFeatureIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoveOrganizationFeatureIntent) { // not required
		return nil
	}

	if m.RemoveOrganizationFeatureIntent != nil {
		if err := m.RemoveOrganizationFeatureIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("removeOrganizationFeatureIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("removeOrganizationFeatureIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSetOrganizationFeatureIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.SetOrganizationFeatureIntent) { // not required
		return nil
	}

	if m.SetOrganizationFeatureIntent != nil {
		if err := m.SetOrganizationFeatureIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setOrganizationFeatureIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setOrganizationFeatureIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSetPaymentMethodIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.SetPaymentMethodIntent) { // not required
		return nil
	}

	if m.SetPaymentMethodIntent != nil {
		if err := m.SetPaymentMethodIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setPaymentMethodIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setPaymentMethodIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSetPaymentMethodIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.SetPaymentMethodIntentV2) { // not required
		return nil
	}

	if m.SetPaymentMethodIntentV2 != nil {
		if err := m.SetPaymentMethodIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setPaymentMethodIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setPaymentMethodIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSignRawPayloadIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.SignRawPayloadIntent) { // not required
		return nil
	}

	if m.SignRawPayloadIntent != nil {
		if err := m.SignRawPayloadIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signRawPayloadIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signRawPayloadIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSignRawPayloadIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.SignRawPayloadIntentV2) { // not required
		return nil
	}

	if m.SignRawPayloadIntentV2 != nil {
		if err := m.SignRawPayloadIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signRawPayloadIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signRawPayloadIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSignTransactionIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.SignTransactionIntent) { // not required
		return nil
	}

	if m.SignTransactionIntent != nil {
		if err := m.SignTransactionIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signTransactionIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signTransactionIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateSignTransactionIntentV2(formats strfmt.Registry) error {
	if swag.IsZero(m.SignTransactionIntentV2) { // not required
		return nil
	}

	if m.SignTransactionIntentV2 != nil {
		if err := m.SignTransactionIntentV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signTransactionIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signTransactionIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateUpdateAllowedOriginsIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateAllowedOriginsIntent) { // not required
		return nil
	}

	if m.UpdateAllowedOriginsIntent != nil {
		if err := m.UpdateAllowedOriginsIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAllowedOriginsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateAllowedOriginsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateUpdatePolicyIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatePolicyIntent) { // not required
		return nil
	}

	if m.UpdatePolicyIntent != nil {
		if err := m.UpdatePolicyIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePolicyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePolicyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateUpdatePrivateKeyTagIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatePrivateKeyTagIntent) { // not required
		return nil
	}

	if m.UpdatePrivateKeyTagIntent != nil {
		if err := m.UpdatePrivateKeyTagIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePrivateKeyTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePrivateKeyTagIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateUpdateRootQuorumIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateRootQuorumIntent) { // not required
		return nil
	}

	if m.UpdateRootQuorumIntent != nil {
		if err := m.UpdateRootQuorumIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateRootQuorumIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateRootQuorumIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateUpdateUserIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateUserIntent) { // not required
		return nil
	}

	if m.UpdateUserIntent != nil {
		if err := m.UpdateUserIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateUserIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateUserIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) validateUpdateUserTagIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateUserTagIntent) { // not required
		return nil
	}

	if m.UpdateUserTagIntent != nil {
		if err := m.UpdateUserTagIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateUserTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateUserTagIntent")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 intent based on the context it is used
func (m *V1Intent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcceptInvitationIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptInvitationIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActivateBillingTierIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApproveActivityIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateAPIKeysIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateAPIOnlyUsersIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateAuthenticatorsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateAuthenticatorsIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateInvitationsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateOrganizationIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateOrganizationIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatePolicyIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatePolicyIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatePolicyIntentV3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatePrivateKeyTagIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatePrivateKeysIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatePrivateKeysIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateSubOrganizationIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateSubOrganizationIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateSubOrganizationIntentV3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateSubOrganizationIntentV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateUserTagIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateUsersIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateUsersIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateWalletAccountsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateWalletIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteAPIKeysIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteAuthenticatorsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteInvitationIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteOrganizationIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletePaymentMethodIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletePolicyIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletePrivateKeyTagsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteUserTagsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteUsersIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisablePrivateKeyIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportPrivateKeyIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportWalletIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitUserEmailRecoveryIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverUserIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRejectActivityIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoveOrganizationFeatureIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetOrganizationFeatureIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetPaymentMethodIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetPaymentMethodIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignRawPayloadIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignRawPayloadIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignTransactionIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignTransactionIntentV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateAllowedOriginsIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatePolicyIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatePrivateKeyTagIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateRootQuorumIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateUserIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateUserTagIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Intent) contextValidateAcceptInvitationIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.AcceptInvitationIntent != nil {

		if swag.IsZero(m.AcceptInvitationIntent) { // not required
			return nil
		}

		if err := m.AcceptInvitationIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptInvitationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acceptInvitationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateAcceptInvitationIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.AcceptInvitationIntentV2 != nil {

		if swag.IsZero(m.AcceptInvitationIntentV2) { // not required
			return nil
		}

		if err := m.AcceptInvitationIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptInvitationIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acceptInvitationIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateActivateBillingTierIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.ActivateBillingTierIntent != nil {

		if swag.IsZero(m.ActivateBillingTierIntent) { // not required
			return nil
		}

		if err := m.ActivateBillingTierIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateBillingTierIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateBillingTierIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateApproveActivityIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.ApproveActivityIntent != nil {

		if swag.IsZero(m.ApproveActivityIntent) { // not required
			return nil
		}

		if err := m.ApproveActivityIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approveActivityIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("approveActivityIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateAPIKeysIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateAPIKeysIntent != nil {

		if swag.IsZero(m.CreateAPIKeysIntent) { // not required
			return nil
		}

		if err := m.CreateAPIKeysIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createApiKeysIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createApiKeysIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateAPIOnlyUsersIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateAPIOnlyUsersIntent != nil {

		if swag.IsZero(m.CreateAPIOnlyUsersIntent) { // not required
			return nil
		}

		if err := m.CreateAPIOnlyUsersIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createApiOnlyUsersIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createApiOnlyUsersIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateAuthenticatorsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateAuthenticatorsIntent != nil {

		if swag.IsZero(m.CreateAuthenticatorsIntent) { // not required
			return nil
		}

		if err := m.CreateAuthenticatorsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createAuthenticatorsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createAuthenticatorsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateAuthenticatorsIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateAuthenticatorsIntentV2 != nil {

		if swag.IsZero(m.CreateAuthenticatorsIntentV2) { // not required
			return nil
		}

		if err := m.CreateAuthenticatorsIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createAuthenticatorsIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createAuthenticatorsIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateInvitationsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateInvitationsIntent != nil {

		if swag.IsZero(m.CreateInvitationsIntent) { // not required
			return nil
		}

		if err := m.CreateInvitationsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvitationsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createInvitationsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateOrganizationIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateOrganizationIntent != nil {

		if err := m.CreateOrganizationIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateOrganizationIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateOrganizationIntentV2 != nil {

		if swag.IsZero(m.CreateOrganizationIntentV2) { // not required
			return nil
		}

		if err := m.CreateOrganizationIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreatePolicyIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatePolicyIntent != nil {

		if swag.IsZero(m.CreatePolicyIntent) { // not required
			return nil
		}

		if err := m.CreatePolicyIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPolicyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPolicyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreatePolicyIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatePolicyIntentV2 != nil {

		if swag.IsZero(m.CreatePolicyIntentV2) { // not required
			return nil
		}

		if err := m.CreatePolicyIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPolicyIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPolicyIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreatePolicyIntentV3(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatePolicyIntentV3 != nil {

		if swag.IsZero(m.CreatePolicyIntentV3) { // not required
			return nil
		}

		if err := m.CreatePolicyIntentV3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPolicyIntentV3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPolicyIntentV3")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreatePrivateKeyTagIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatePrivateKeyTagIntent != nil {

		if swag.IsZero(m.CreatePrivateKeyTagIntent) { // not required
			return nil
		}

		if err := m.CreatePrivateKeyTagIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPrivateKeyTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPrivateKeyTagIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreatePrivateKeysIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatePrivateKeysIntent != nil {

		if swag.IsZero(m.CreatePrivateKeysIntent) { // not required
			return nil
		}

		if err := m.CreatePrivateKeysIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPrivateKeysIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPrivateKeysIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreatePrivateKeysIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatePrivateKeysIntentV2 != nil {

		if swag.IsZero(m.CreatePrivateKeysIntentV2) { // not required
			return nil
		}

		if err := m.CreatePrivateKeysIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPrivateKeysIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPrivateKeysIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateSubOrganizationIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateSubOrganizationIntent != nil {

		if swag.IsZero(m.CreateSubOrganizationIntent) { // not required
			return nil
		}

		if err := m.CreateSubOrganizationIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateSubOrganizationIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateSubOrganizationIntentV2 != nil {

		if swag.IsZero(m.CreateSubOrganizationIntentV2) { // not required
			return nil
		}

		if err := m.CreateSubOrganizationIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateSubOrganizationIntentV3(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateSubOrganizationIntentV3 != nil {

		if swag.IsZero(m.CreateSubOrganizationIntentV3) { // not required
			return nil
		}

		if err := m.CreateSubOrganizationIntentV3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntentV3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntentV3")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateSubOrganizationIntentV4(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateSubOrganizationIntentV4 != nil {

		if swag.IsZero(m.CreateSubOrganizationIntentV4) { // not required
			return nil
		}

		if err := m.CreateSubOrganizationIntentV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubOrganizationIntentV4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubOrganizationIntentV4")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateUserTagIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateUserTagIntent != nil {

		if swag.IsZero(m.CreateUserTagIntent) { // not required
			return nil
		}

		if err := m.CreateUserTagIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUserTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createUserTagIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateUsersIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateUsersIntent != nil {

		if swag.IsZero(m.CreateUsersIntent) { // not required
			return nil
		}

		if err := m.CreateUsersIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUsersIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createUsersIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateUsersIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateUsersIntentV2 != nil {

		if swag.IsZero(m.CreateUsersIntentV2) { // not required
			return nil
		}

		if err := m.CreateUsersIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUsersIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createUsersIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateWalletAccountsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateWalletAccountsIntent != nil {

		if swag.IsZero(m.CreateWalletAccountsIntent) { // not required
			return nil
		}

		if err := m.CreateWalletAccountsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createWalletAccountsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createWalletAccountsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateCreateWalletIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreateWalletIntent != nil {

		if swag.IsZero(m.CreateWalletIntent) { // not required
			return nil
		}

		if err := m.CreateWalletIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createWalletIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createWalletIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeleteAPIKeysIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteAPIKeysIntent != nil {

		if swag.IsZero(m.DeleteAPIKeysIntent) { // not required
			return nil
		}

		if err := m.DeleteAPIKeysIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteApiKeysIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteApiKeysIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeleteAuthenticatorsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteAuthenticatorsIntent != nil {

		if swag.IsZero(m.DeleteAuthenticatorsIntent) { // not required
			return nil
		}

		if err := m.DeleteAuthenticatorsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAuthenticatorsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteAuthenticatorsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeleteInvitationIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteInvitationIntent != nil {

		if swag.IsZero(m.DeleteInvitationIntent) { // not required
			return nil
		}

		if err := m.DeleteInvitationIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteInvitationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteInvitationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeleteOrganizationIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteOrganizationIntent != nil {

		if swag.IsZero(m.DeleteOrganizationIntent) { // not required
			return nil
		}

		if err := m.DeleteOrganizationIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteOrganizationIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteOrganizationIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeletePaymentMethodIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeletePaymentMethodIntent != nil {

		if swag.IsZero(m.DeletePaymentMethodIntent) { // not required
			return nil
		}

		if err := m.DeletePaymentMethodIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletePaymentMethodIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletePaymentMethodIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeletePolicyIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeletePolicyIntent != nil {

		if swag.IsZero(m.DeletePolicyIntent) { // not required
			return nil
		}

		if err := m.DeletePolicyIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletePolicyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletePolicyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeletePrivateKeyTagsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeletePrivateKeyTagsIntent != nil {

		if swag.IsZero(m.DeletePrivateKeyTagsIntent) { // not required
			return nil
		}

		if err := m.DeletePrivateKeyTagsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletePrivateKeyTagsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletePrivateKeyTagsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeleteUserTagsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteUserTagsIntent != nil {

		if swag.IsZero(m.DeleteUserTagsIntent) { // not required
			return nil
		}

		if err := m.DeleteUserTagsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteUserTagsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteUserTagsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDeleteUsersIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteUsersIntent != nil {

		if swag.IsZero(m.DeleteUsersIntent) { // not required
			return nil
		}

		if err := m.DeleteUsersIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteUsersIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteUsersIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateDisablePrivateKeyIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.DisablePrivateKeyIntent != nil {

		if swag.IsZero(m.DisablePrivateKeyIntent) { // not required
			return nil
		}

		if err := m.DisablePrivateKeyIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disablePrivateKeyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disablePrivateKeyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateExportPrivateKeyIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.ExportPrivateKeyIntent != nil {

		if swag.IsZero(m.ExportPrivateKeyIntent) { // not required
			return nil
		}

		if err := m.ExportPrivateKeyIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exportPrivateKeyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exportPrivateKeyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateExportWalletIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.ExportWalletIntent != nil {

		if swag.IsZero(m.ExportWalletIntent) { // not required
			return nil
		}

		if err := m.ExportWalletIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exportWalletIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exportWalletIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateInitUserEmailRecoveryIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.InitUserEmailRecoveryIntent != nil {

		if swag.IsZero(m.InitUserEmailRecoveryIntent) { // not required
			return nil
		}

		if err := m.InitUserEmailRecoveryIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initUserEmailRecoveryIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initUserEmailRecoveryIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateRecoverUserIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverUserIntent != nil {

		if swag.IsZero(m.RecoverUserIntent) { // not required
			return nil
		}

		if err := m.RecoverUserIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverUserIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverUserIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateRejectActivityIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.RejectActivityIntent != nil {

		if swag.IsZero(m.RejectActivityIntent) { // not required
			return nil
		}

		if err := m.RejectActivityIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejectActivityIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rejectActivityIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateRemoveOrganizationFeatureIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoveOrganizationFeatureIntent != nil {

		if swag.IsZero(m.RemoveOrganizationFeatureIntent) { // not required
			return nil
		}

		if err := m.RemoveOrganizationFeatureIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("removeOrganizationFeatureIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("removeOrganizationFeatureIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSetOrganizationFeatureIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.SetOrganizationFeatureIntent != nil {

		if swag.IsZero(m.SetOrganizationFeatureIntent) { // not required
			return nil
		}

		if err := m.SetOrganizationFeatureIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setOrganizationFeatureIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setOrganizationFeatureIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSetPaymentMethodIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.SetPaymentMethodIntent != nil {

		if swag.IsZero(m.SetPaymentMethodIntent) { // not required
			return nil
		}

		if err := m.SetPaymentMethodIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setPaymentMethodIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setPaymentMethodIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSetPaymentMethodIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.SetPaymentMethodIntentV2 != nil {

		if swag.IsZero(m.SetPaymentMethodIntentV2) { // not required
			return nil
		}

		if err := m.SetPaymentMethodIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setPaymentMethodIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setPaymentMethodIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSignRawPayloadIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.SignRawPayloadIntent != nil {

		if swag.IsZero(m.SignRawPayloadIntent) { // not required
			return nil
		}

		if err := m.SignRawPayloadIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signRawPayloadIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signRawPayloadIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSignRawPayloadIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.SignRawPayloadIntentV2 != nil {

		if swag.IsZero(m.SignRawPayloadIntentV2) { // not required
			return nil
		}

		if err := m.SignRawPayloadIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signRawPayloadIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signRawPayloadIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSignTransactionIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.SignTransactionIntent != nil {

		if swag.IsZero(m.SignTransactionIntent) { // not required
			return nil
		}

		if err := m.SignTransactionIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signTransactionIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signTransactionIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateSignTransactionIntentV2(ctx context.Context, formats strfmt.Registry) error {

	if m.SignTransactionIntentV2 != nil {

		if swag.IsZero(m.SignTransactionIntentV2) { // not required
			return nil
		}

		if err := m.SignTransactionIntentV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signTransactionIntentV2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signTransactionIntentV2")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateUpdateAllowedOriginsIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateAllowedOriginsIntent != nil {

		if swag.IsZero(m.UpdateAllowedOriginsIntent) { // not required
			return nil
		}

		if err := m.UpdateAllowedOriginsIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAllowedOriginsIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateAllowedOriginsIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateUpdatePolicyIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatePolicyIntent != nil {

		if swag.IsZero(m.UpdatePolicyIntent) { // not required
			return nil
		}

		if err := m.UpdatePolicyIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePolicyIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePolicyIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateUpdatePrivateKeyTagIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatePrivateKeyTagIntent != nil {

		if swag.IsZero(m.UpdatePrivateKeyTagIntent) { // not required
			return nil
		}

		if err := m.UpdatePrivateKeyTagIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePrivateKeyTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePrivateKeyTagIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateUpdateRootQuorumIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateRootQuorumIntent != nil {

		if swag.IsZero(m.UpdateRootQuorumIntent) { // not required
			return nil
		}

		if err := m.UpdateRootQuorumIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateRootQuorumIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateRootQuorumIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateUpdateUserIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateUserIntent != nil {

		if swag.IsZero(m.UpdateUserIntent) { // not required
			return nil
		}

		if err := m.UpdateUserIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateUserIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateUserIntent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Intent) contextValidateUpdateUserTagIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateUserTagIntent != nil {

		if swag.IsZero(m.UpdateUserTagIntent) { // not required
			return nil
		}

		if err := m.UpdateUserTagIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateUserTagIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateUserTagIntent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Intent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Intent) UnmarshalBinary(b []byte) error {
	var res V1Intent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
