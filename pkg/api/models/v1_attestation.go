// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Attestation v1 attestation
//
// swagger:model v1Attestation
type V1Attestation struct {

	// A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
	// Required: true
	AttestationObject *string `json:"attestationObject"`

	// A base64 url encoded payload containing metadata about the signing context and the challenge.
	// Required: true
	ClientDataJSON *string `json:"clientDataJson"`

	// The cbor encoded then base64 url encoded id of the credential.
	// Required: true
	CredentialID *string `json:"credentialId"`

	// The type of authenticator transports.
	// Required: true
	Transports []Immutablewebauthnv1AuthenticatorTransport `json:"transports"`
}

// Validate validates this v1 attestation
func (m *V1Attestation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestationObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientDataJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Attestation) validateAttestationObject(formats strfmt.Registry) error {

	if err := validate.Required("attestationObject", "body", m.AttestationObject); err != nil {
		return err
	}

	return nil
}

func (m *V1Attestation) validateClientDataJSON(formats strfmt.Registry) error {

	if err := validate.Required("clientDataJson", "body", m.ClientDataJSON); err != nil {
		return err
	}

	return nil
}

func (m *V1Attestation) validateCredentialID(formats strfmt.Registry) error {

	if err := validate.Required("credentialId", "body", m.CredentialID); err != nil {
		return err
	}

	return nil
}

func (m *V1Attestation) validateTransports(formats strfmt.Registry) error {

	if err := validate.Required("transports", "body", m.Transports); err != nil {
		return err
	}

	for i := 0; i < len(m.Transports); i++ {

		if err := m.Transports[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transports" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transports" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this v1 attestation based on the context it is used
func (m *V1Attestation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Attestation) contextValidateTransports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transports); i++ {

		if swag.IsZero(m.Transports[i]) { // not required
			return nil
		}

		if err := m.Transports[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transports" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transports" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Attestation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Attestation) UnmarshalBinary(b []byte) error {
	var res V1Attestation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
