// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportPrivateKeyIntent import private key intent
//
// swagger:model ImportPrivateKeyIntent
type ImportPrivateKeyIntent struct {

	// Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
	// Required: true
	AddressFormats []AddressFormat `json:"addressFormats"`

	// Cryptographic Curve used to generate a given Private Key.
	// Required: true
	Curve *Curve `json:"curve"`

	// Bundle containing a raw private key encrypted to the enclave's target public key.
	// Required: true
	EncryptedBundle *string `json:"encryptedBundle"`

	// Human-readable name for a Private Key.
	// Required: true
	PrivateKeyName *string `json:"privateKeyName"`

	// The ID of the User importing a Private Key.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this import private key intent
func (m *ImportPrivateKeyIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressFormats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptedBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportPrivateKeyIntent) validateAddressFormats(formats strfmt.Registry) error {

	if err := validate.Required("addressFormats", "body", m.AddressFormats); err != nil {
		return err
	}

	for i := 0; i < len(m.AddressFormats); i++ {

		if err := m.AddressFormats[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ImportPrivateKeyIntent) validateCurve(formats strfmt.Registry) error {

	if err := validate.Required("curve", "body", m.Curve); err != nil {
		return err
	}

	if err := validate.Required("curve", "body", m.Curve); err != nil {
		return err
	}

	if m.Curve != nil {
		if err := m.Curve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curve")
			}
			return err
		}
	}

	return nil
}

func (m *ImportPrivateKeyIntent) validateEncryptedBundle(formats strfmt.Registry) error {

	if err := validate.Required("encryptedBundle", "body", m.EncryptedBundle); err != nil {
		return err
	}

	return nil
}

func (m *ImportPrivateKeyIntent) validatePrivateKeyName(formats strfmt.Registry) error {

	if err := validate.Required("privateKeyName", "body", m.PrivateKeyName); err != nil {
		return err
	}

	return nil
}

func (m *ImportPrivateKeyIntent) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this import private key intent based on the context it is used
func (m *ImportPrivateKeyIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressFormats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportPrivateKeyIntent) contextValidateAddressFormats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddressFormats); i++ {

		if swag.IsZero(m.AddressFormats[i]) { // not required
			return nil
		}

		if err := m.AddressFormats[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ImportPrivateKeyIntent) contextValidateCurve(ctx context.Context, formats strfmt.Registry) error {

	if m.Curve != nil {

		if err := m.Curve.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curve")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportPrivateKeyIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportPrivateKeyIntent) UnmarshalBinary(b []byte) error {
	var res ImportPrivateKeyIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
